# -*- coding: utf-8 -*-
"""
Created on Thu Apr  5 11:04:38 2018

@author: rwilkins
"""

import pandas as pd
import numpy as np

class Development:
    """ A development is a single cell in an actuarial triangle"""
    def __init__(self, period, start, end, value, cumu, periodType):
        self.period = period
        self.start = start
        self.end = end
        self.value = value
        self.cumu = cumu
        self.periodType = periodType
        



class ActTriangle:
    
    def __init__(self, tabular, cumulative = True, dev_type = "Unspecified"):
        self.cumulative= cumulative
        self.tabular = tabular
        self.dev_type = dev_type
        
        self.periods = self.tabular.period.unique()
        self.devs = self.tabular.end.unique()
    
    @property
    def dev_type(self):
        return self._dev_type
        
    @dev_type.setter
    def dev_type(self, d):
        """ Restrict allowable settings for development type"""
        if not d in ["Unspecified","AY","PY","RY"]: 
            raise Exception("'dev_type' must be one of 'AY','PY','RY'")
        self._dev_type = d
        
    def CumulativeConvert(self):
        """Convert a triangle to cumulative development"""
        if self.cumulative:
            pass
        else:
           # cumu_frame = None
            for i in self.tabular:
                pass
                
        
            
    
    def IncrementalConvert(self):
        """Convert a triangle to incremental development"""
        if not self.cumulative:
            pass
        else:
            inc_frame = pd.DataFrame()
            for i in self.tabular.values:
                if i[1] == 0:
                    inc_frame = inc_frame.append({'period':i[0],'start':i[1],'end':i[2], \
                                                  'value':i[3]}, ignore_index = True)
                else:
                    prev_value = self.tabular.loc[(self.tabular["period"] == i[0]) \
                                                   & (self.tabular["end"] == i[1])]["value"]
                    inc_value = i[3] - prev_value
                    inc_frame = inc_frame.append({'period':i[0],'start':i[1],'end':i[2], \
                                                  'value':int(inc_value)}, ignore_index = True)
            self.cumulative = False
            self.tabular = inc_frame.loc[:, ("period","start","end","value")]
        
    
    @property
    def triangle_view(self):
        viewer = self.tabular.pivot(index = "period", columns ="end", values = "value")
        viewer = viewer.loc[:,self.devs]
        print(viewer)
    
    
def ConvertActTriangle(triangle):
    """Converts the classic actuarial triangle format (as a DataFrame) to the 
    tabular version"""
    devs = list(triangle)[1:]
        
    melted = pd.melt(triangle, id_vars = list(triangle)[0], var_name = "end")
    #smelted["value"] = melted["value"].apply(lambda x: int(x.strip()))
    melted["start"] = melted["end"].apply(lambda x: find_previous_dev(x, devs))
    melted.rename(columns={list(melted)[0]:'period'}, inplace = True)
    melted = melted.loc[:, ("period","start","end","value")]
    
    return melted.dropna()

def find_previous_dev(current,mydevs):
    """ Given a development and list of developments in order find the previous
    one or return NaN if doesn't exist"""
    try:
        location = mydevs.index(current)
        if location is not 0:
            return mydevs[location-1]
        else:
            return 0
    except:
        return "NaN" 
    

def main():
    """ Function testing below"""
    import FunctionTesting as ft
    
    s = ConvertActTriangle(ft.data())
    y = ActTriangle(s, True)
    print(s)

if __name__ == '__main__':
    main()
